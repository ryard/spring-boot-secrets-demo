kind: BuildConfig
apiVersion: build.openshift.io/v1
metadata:
  name: spring-boot-secrets-demo-pipeline
spec:
  source:
    type: Git
    git:
      uri: 'https://github.com/ryard/spring-boot-secrets-demo.git'
      ref: '0.2'
  strategy:
    jenkinsPipelineStrategy:
      jenkinsfile: |-
        pipeline {
          options {
            // set a timeout of 60 minutes for this pipeline
            timeout(time: 60, unit: 'MINUTES')
          }
          agent {
            node {
              label 'maven'
            }
          }

          environment {
            DEV_PROJECT = "robertoy-spring-boot-secrets-dev"
            STAGE_PROJECT = "robertoy-spring-boot-secrets-stage"
            APP_GIT_URL = "https://github.com/ryard/spring-boot-secrets-demo"
            NEXUS_SERVER = "http://nexus-common.apps.na45.prod.nextcle.com/repository/java"

            // DO NOT CHANGE THE GLOBAL VARS BELOW THIS LINE
            APP_NAME = "spring-boot-secrets-demo"
          }
          stages {
            stage('Clone external proj') {
              steps {
                git branch: '0.2',
                url: 'https://github.com/ryard/spring-boot-secrets-demo.git'
              }
            }
            stage('Compilation Check') {
              steps {
                echo '### Checking for compile errors ###'
                sh '''
                        mvn -s settings.xml -B clean compile
                   '''
              }
            }
            stage('Run Unit Tests') {
              steps {
                echo '### Running unit tests ###'
                sh '''
                        mvn -s settings.xml -B clean test -Dtest=GitHubControllerTest
                   '''
              }
            }
            stage('Create secrets') {
              steps {             
                echo '### Clean up existing secrets ###'
                script {
                    openshift.withCluster() {
                        openshift.withProject( "${DEV_PROJECT}" ) {
                            if (openshift.selector("secrets", "spring-security").exists()) {
                                openshift.selector("secrets", "spring-security").delete()
                            }
                            if (openshift.selector("secrets", "spring-github-demo").exists()) {
                                openshift.selector("secrets", "spring-github-demo").delete()
                            }
                        }
                    }
                }              
                echo '### Creating secrets ###'
                sh '''
                        echo '%token%' > /tmp/github.token
                        echo '%user%' > /tmp/github.user
                        oc project ${DEV_PROJECT}	
                        oc create secret generic spring-security --from-literal=spring.user.name=demo --from-literal=spring.user.password=password
                        oc create secret generic spring-github-demo --from-file /tmp/github.user --from-file /tmp/github.token
                   '''
              }
            }		
            stage('Create resources') {
              steps {
                echo '### Creating resources ###'
                sh '''
                        mvn -s settings.xml -B clean fabric8:resource
                   '''
              }
            }		
            stage('Deploy') {
              steps {
                echo '### Deploying in dev ###'
                sh '''
                        oc project ${DEV_PROJECT}
                        mvn -s settings.xml -B fabric8:deploy -DskipTests=true
                   '''
              }
            }
            stage('Wait for deployment in DEV env') {
              steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject( "${DEV_PROJECT}" ) {
                            openshift.selector("dc", "${APP_NAME}").related('pods').untilEach(1) {
                                return (it.object().status.phase == "Running")
                            }
                        }
                    }
                }
              }
            }
            stage('Promote to Staging Env') {
              steps {
                timeout(time: 60, unit: 'MINUTES') {
                    input message: "Promote to Staging?"
                }
              }
            }
            stage('Deploy to Staging Env') {
              steps {
                echo '### Clean up existing secrets ###'
                script {
                    openshift.withCluster() {
                        openshift.withProject( "${STAGE_PROJECT}" ) {
                            if (openshift.selector("secrets", "spring-security").exists()) {
                                openshift.selector("secrets", "spring-security").delete()
                            }
                            if (openshift.selector("secrets", "spring-github-demo").exists()) {
                                openshift.selector("secrets", "spring-github-demo").delete()
                            }
                        }
                    }
                }
                echo '### Creating secrets in Staging ###'
                sh '''
                        oc project ${STAGE_PROJECT}
						
                        oc create secret generic spring-security --from-literal=spring.user.name=demo --from-literal=spring.user.password=password
                        oc create secret generic spring-github-demo --from-file /tmp/github.user --from-file /tmp/github.token
                   '''			
                echo '### Deploying in staging ###'
                sh '''
                        oc project ${STAGE_PROJECT}
                        mvn -s settings.xml -B fabric8:deploy -DskipTests=true
                   '''
              }
            }
            stage('Wait for deployment in Staging') {
              steps {
                sh "oc get route ${APP_NAME} -n ${STAGE_PROJECT} -o jsonpath='{ .spec.host }' --loglevel=4 > routehost"
                script {
                    routeHost = readFile('routehost').trim()
                    openshift.withCluster() {
                        openshift.withProject( "${STAGE_PROJECT}" ) {
                            def deployment = openshift.selector("dc", "${APP_NAME}").rollout()
                            openshift.selector("dc", "${APP_NAME}").related('pods').untilEach(1) {
                                return (it.object().status.phase == "Running")
                            }
                        }
                        echo "Deployment to Staging env is complete. Access the API endpoint at the URL http://${routeHost}/mygithubrepos"
                    }
                }
              }
            }
          }
        }
    type: JenkinsPipeline
